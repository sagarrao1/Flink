package com.janani.stream;

import org.apache.flink.api.common.ExecutionConfig;
import org.apache.flink.api.common.functions.FilterFunction;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.configuration.RestOptions;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

// imaging we are getting this data from sensor placed in highway
public class HighSpeedVehicleDetection {

	public static void main(String[] args) throws Exception {
		final ParameterTool params = ParameterTool.fromArgs(args);
		final StreamExecutionEnvironment env
				= StreamExecutionEnvironment.getExecutionEnvironment();
		env.getConfig().setGlobalJobParameters(params);
		DataStream<String> dataStream = StreamUtil.getDataStream(env, params);

//		Below is for running in cluster from cygwin
//		DataStream<String> dataStream = env.readTextFile("./CarSpeeds.txt");

		if (dataStream == null) {
			System.exit(1);
			return;
		}
		DataStream<String> carSpeedStream = dataStream
				.filter(new Filter());
//				.name("High speed filter operation").uid("car-speed-filter");

//		ExecutionConfig executionConfig = env.getConfig();
//		System.out.println("** Auto generated Uid's : "+
//				executionConfig.hasAutoGeneratedUIDsEnabled());
//		System.out.println("*** parallelism :"+
//				executionConfig.getParallelism());
//		System.out.println("*** Mar Parallelism : "+
//				executionConfig.getMaxParallelism());
//		System.out.println("*** Execution mode :"+
//				executionConfig.getExecutionMode());
//		System.out.println("*** Restart sttrategy :"+
//				executionConfig.getRestartStrategy());


//		Configuration conf = new Configuration();
//		conf.setInteger(RestOptions.PORT,8082);
//
//		final StreamExecutionEnvironment env = StreamExecutionEnvironment.createLocalEnvironment(2,conf);
//		DataStream<String> carSpeedStream = env
//				.socketTextStream("localhost", 9000)
//				.filter(new Filter());

		carSpeedStream.print();
		env.execute("Car speed detection");
	}
	
	public static class Filter implements FilterFunction<String> {

		@Override
		public boolean filter(String input) throws Exception {
			String[] tokens = input.split(",");

			try {
				Thread.sleep(10000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}

//			assume 1st token is name of the car and 2nd token is speed of the car
			if(tokens.length==2 && Float.parseFloat(tokens[1].trim()) > 65 ) {
				return true;
			}
			return false;
		}
		
	}

}
